# nibm
A non-interactive boot manager

Requirements:
	no gui
	no user i/o
	no extra effort for 32bit support
	usable from default EFI location
	usable with SecureBoot
	simple file list
	recompile to reconfigure
	human-(edit|hack|read)able

Project files layout:
	nibm.c: Main loop and functions
	libnibm.c/h: Main library for shared functions
	action_*.c/h: Actions that can be included and used
	config.def.h: Template for the config file

Questions:
	Can a shell script be executed, and execution of chains resume?
	Is it worth reading from a signed configuration file instead
		of compiling in the configuration?
	How can actions be designed to require minimal (or no) changes
		to the Makefile for each new action?
	Consider a different interface for calling actions, to allow passing
		more than a string. How are keys identified and passed?

Master Chain:
	Array of Chains
	Executed in order
	Chain execution stops on loading an external app

Chain:
	Array of actions
	Executed in order
	A failed action ceases operation of the Chain

Actions:
	Mountable Device detection
	File system detection
	File detection
	Other hardware device detection
	Load efi binary
	Load linux kernel
	Run efi shell script (is this a subset of load binary?)
	Verify hash
	Verify signature

Keys:
	Map of keys to use for signature verification or hash checking

Other EFI applications and inspirations:
	efitools: https://github.com/marineam/efitools
	rEFInd: https://sourceforge.net/projects/refind/
	shim: https://github.com/rhinstaller/shim
	systemd boot: https://github.com/systemd/systemd/tree/master/src/boot/efi
